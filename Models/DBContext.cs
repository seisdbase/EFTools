// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace EFTools.Models
{
    public partial class DBContext : DbContext
    {
        public DBContext()
        {
        }

        public DBContext(DbContextOptions<DBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<Agent> Agents { get; set; }
        public virtual DbSet<Agreement> Agreements { get; set; }
        public virtual DbSet<Broker> Brokers { get; set; }
        public virtual DbSet<Contact> Contacts { get; set; }
        public virtual DbSet<FinancialOption> FinancialOptions { get; set; }
        public virtual DbSet<Organization> Organizations { get; set; }
        public virtual DbSet<Party> Parties { get; set; }
        public virtual DbSet<PartyAgreementBase> PartyAgreementBases { get; set; }
        public virtual DbSet<PensionAgreement> PensionAgreements { get; set; }
        public virtual DbSet<Person> People { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer("Put connection string sent by Outlook email");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasDefaultSchema("dm_client_portal")
                .UseCollation("Czech_CI_AS");

            modelBuilder.Entity<Address>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Address");

                entity.Property(e => e.AddressTypeCd).HasMaxLength(10);

                entity.Property(e => e.AddressTypeDesc).HasMaxLength(200);

                entity.Property(e => e.City).HasMaxLength(80);

                entity.Property(e => e.Country).HasMaxLength(200);

                entity.Property(e => e.CountryA3)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.SourceSystem).HasMaxLength(20);

                entity.Property(e => e.Street).HasMaxLength(80);

                entity.Property(e => e.ZipCode).HasMaxLength(10);
            });

            modelBuilder.Entity<Agent>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Agent");

                entity.Property(e => e.AgentId).HasMaxLength(50);

                entity.Property(e => e.BrokerId).HasMaxLength(50);

                entity.Property(e => e.EmployeeFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LicenseNbr).HasMaxLength(50);

                entity.Property(e => e.SourceSystem).HasMaxLength(20);

                entity.Property(e => e.TiedAgentFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Agreement>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Agreement");

                entity.Property(e => e.PaymentFrequencyCd).HasMaxLength(20);

                entity.Property(e => e.PaymentFrequencyDesc).HasMaxLength(200);

                entity.Property(e => e.SourceSystem).HasMaxLength(20);

                entity.Property(e => e.StatusCd).HasMaxLength(200);

                entity.Property(e => e.StatusDesc).HasMaxLength(200);
            });

            modelBuilder.Entity<Broker>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Broker");

                entity.Property(e => e.ActiveFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.BrokerId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DistributionChannelCd).HasMaxLength(10);

                entity.Property(e => e.DistributionChannelDesc).HasMaxLength(200);

                entity.Property(e => e.FullName).HasMaxLength(250);

                entity.Property(e => e.IdentificationNbr).HasMaxLength(15);

                entity.Property(e => e.ShortName).HasMaxLength(250);

                entity.Property(e => e.SourceSystem).HasMaxLength(20);
            });

            modelBuilder.Entity<Contact>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Contact");

                entity.Property(e => e.ContactTypeCd)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ContactTypeDesc).HasMaxLength(200);

                entity.Property(e => e.ContactValue).HasMaxLength(80);

                entity.Property(e => e.SourceSystem).HasMaxLength(20);
            });

            modelBuilder.Entity<FinancialOption>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FinancialOption");

                entity.Property(e => e.AmountBasisCd).HasMaxLength(20);

                entity.Property(e => e.AmountBasisDesc).HasMaxLength(200);

                entity.Property(e => e.PaymentFrequencyCd).HasMaxLength(20);

                entity.Property(e => e.PaymentFrequencyDesc).HasMaxLength(200);

                entity.Property(e => e.SourceSystem).HasMaxLength(20);
            });

            modelBuilder.Entity<Organization>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Organization");

                entity.Property(e => e.FullName).HasMaxLength(200);

                entity.Property(e => e.IdentificationNumber).HasMaxLength(20);

                entity.Property(e => e.MarketingConsent).HasMaxLength(10);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.OrganizationKindCd).HasMaxLength(1);

                entity.Property(e => e.SourceSystem).HasMaxLength(20);

                entity.Property(e => e.TaxIdentificationNumber).HasMaxLength(20);
            });

            modelBuilder.Entity<Party>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Party");

                entity.Property(e => e.PartyKindCd)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PartyTypeCd)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.SourceSystem).HasMaxLength(20);
            });

            modelBuilder.Entity<PartyAgreementBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PartyAgreementBase");

                entity.Property(e => e.PartyAgreementBaseRoleCd).HasMaxLength(20);

                entity.Property(e => e.PartyAgreementBaseRoleDesc).HasMaxLength(200);

                entity.Property(e => e.SourceSystem).HasMaxLength(20);
            });

            modelBuilder.Entity<PensionAgreement>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PensionAgreement");

                entity.Property(e => e.PensionPlanCd).HasMaxLength(20);

                entity.Property(e => e.PensionPlanDesc).HasMaxLength(200);
            });

            modelBuilder.Entity<Person>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Person");

                entity.Property(e => e.BirthNumber).HasMaxLength(20);

                entity.Property(e => e.BirthPlace).HasMaxLength(100);

                entity.Property(e => e.CountryOfBirth)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.GATCAIndicator).HasMaxLength(10);

                entity.Property(e => e.GDPRConsent).HasMaxLength(10);

                entity.Property(e => e.GenderCd).HasMaxLength(10);

                entity.Property(e => e.GenderDesc).HasMaxLength(100);

                entity.Property(e => e.GivenName).HasMaxLength(200);

                entity.Property(e => e.MaritalStatusCd).HasMaxLength(10);

                entity.Property(e => e.MaritalStatusDesc).HasMaxLength(100);

                entity.Property(e => e.MarketingConsent).HasMaxLength(10);

                entity.Property(e => e.MiddleName).HasMaxLength(100);

                entity.Property(e => e.PrefixTitles).HasMaxLength(20);

                entity.Property(e => e.SourceSystem).HasMaxLength(20);

                entity.Property(e => e.SuffixTitles).HasMaxLength(20);

                entity.Property(e => e.Surname).HasMaxLength(200);

                entity.Property(e => e.USIndicator).HasMaxLength(10);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}